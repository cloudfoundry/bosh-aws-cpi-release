<%=

params = {
  "cloud" => {
    "plugin" => "aws",
    "properties" => {
      "aws" => {
        "credentials_source" => p('aws.credentials_source'),
        "access_key_id" => p('aws.access_key_id', nil),
        "secret_access_key" => p('aws.secret_access_key', nil),
        "session_token" => p('aws.session_token', nil),
        "role_arn" => p('aws.role_arn', nil),
        "default_iam_instance_profile" => p('aws.default_iam_instance_profile', nil),
        "default_key_name" => p('aws.default_key_name', nil),
        "default_security_groups" => p('aws.default_security_groups'),
        "max_retries" => p('aws.max_retries'),
        "encrypted" => p('aws.encrypted'),
        "kms_key_arn" => p('aws.kms_key_arn', nil),
        "metadata_options" => p('aws.metadata_options', nil)
      },
      "agent" => {
        "ntp" => p('ntp')
      }
    }
  }
}
has_registry = !p(['registry.username', 'registry.password', 'registry.host'], nil).nil?
if has_registry
  params['cloud']['properties']['registry'] = {
      "endpoint" => "http://#{p('registry.username')}:#{ERB::Util.url_encode(p('registry.password'))}@#{p('registry.host')}:#{p('registry.port')}",
      "user" => p('registry.username'),
      "password" => p('registry.password')
  }
end

params["cloud"]["properties"]["debug"] = {
  'cpi'=> {
    'api_version'=> p('debug.cpi.api_version', 2)
  },
}

if_p('aws.stemcell.kernel_id') do |kernel_id|
  params["cloud"]["properties"]["stemcell"] = {
    "kernel_id" => kernel_id
  }
end

if_p('aws.ec2_endpoint') do |endpoint|
  params["cloud"]["properties"]["aws"]["ec2_endpoint"] = endpoint
end

if_p('aws.elb_endpoint') do |endpoint|
  params["cloud"]["properties"]["aws"]["elb_endpoint"] = endpoint
end

params["cloud"]["properties"]["aws"]["region"] = p('aws.region')

agent_params = params["cloud"]["properties"]["agent"]

blobstore_defined = p('blobstore.provider') != 'dav' || !p(['blobstore.agent.user', 'agent.blobstore.address', 'blobstore.address'], nil).nil?
if blobstore_defined
  agent_params["blobstore"] = {
       "provider" => p('blobstore.provider'),
       "options" => {}
  }

  blobstore = agent_params["blobstore"]

  if p('blobstore.provider') == "s3"
    blobstore["options"] = {
      "bucket_name" => p('blobstore.bucket_name'),
      "credentials_source" => p(['agent.blobstore.credentials_source', 'blobstore.credentials_source']),
      "access_key_id" => p(['agent.blobstore.access_key_id', 'blobstore.access_key_id'], nil),
      "secret_access_key" => p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key'], nil),
      "session_token" => p(['agent.blobstore.session_token', 'blobstore.session_token'], nil),
    }

    def update_blobstore_options(blobstore, manifest_key, rendered_key=manifest_key)
      value = p(["agent.blobstore.#{manifest_key}", "blobstore.#{manifest_key}"], nil)
      blobstore["options"][rendered_key] = value unless value.nil?
    end

    update_blobstore_options(blobstore, 'use_ssl')
    update_blobstore_options(blobstore, 's3_port', 'port')
    update_blobstore_options(blobstore, 'host')
    update_blobstore_options(blobstore, 'ssl_verify_peer')
    update_blobstore_options(blobstore, 's3_signature_version', 'signature_version')
    update_blobstore_options(blobstore, 's3_region', 'region')
    update_blobstore_options(blobstore, 'server_side_encryption')
    update_blobstore_options(blobstore, 'sse_kms_key_id')
  elsif p('blobstore.provider') == 'local'
    blobstore["options"] = {
      "blobstore_path" => p('blobstore.path')
    }
  else
    blobstore["options"] = {
      "endpoint" => "http://#{p(['agent.blobstore.address', 'blobstore.address'])}:#{p('blobstore.port')}"
    }

    if_p('blobstore.agent.user') do
      blobstore["options"]["user"] = p('blobstore.agent.user')
      blobstore["options"]["password"] = p('blobstore.agent.password')
    end
  end
end

if_p('agent.mbus') do |mbus|
  agent_params["mbus"] = mbus
end.else do
  nats_defined = !p(['agent.nats.address', 'nats.address', 'nats.password'], nil).nil?
  if nats_defined
    agent_params["mbus"] = "nats://#{p('nats.user')}:#{p('nats.password')}@#{p(['agent.nats.address', 'nats.address'])}:#{p('nats.port')}"
  end
end

JSON.dump(params)

%>
